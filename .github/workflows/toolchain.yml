name: Toolchain

on:
  push:
    branches:
      - flutter/*

jobs:
  toolchain:
    name: Toolchain

    runs-on: ubuntu-latest
    container:
      image: docker.pkg.github.com/barteo/flutter-pi-toolchain/sysroot:flutter-1.22.6
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Create Toolchain path
        id: toolchain
        run: echo "::set-output name=toolchain::`pwd`/main/toolchain"

      - name: Install dependencies
        run: |
          apt update
          apt install -y bison cmake flex g++ git python texinfo
          
      - name: Install dependencies 2
        run: |
          apt install -y make     

      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: main

      - name: Checkout LLVM
        uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          ref: llvmorg-11.0.1
          path: llvm-project

      - name: Checkout Binutils
        run: |
          git clone --depth 1 --branch binutils-2_35_1 git://sourceware.org/git/binutils-gdb.git binutils-gdb

      - name: Test
        run: |
          ls -la /sysroot/lib/arm-linux-gnueabihf
          pwd
          ls -la /sysroot/usr/lib/arm-linux-gnueabihf

      - name: Build LLVM
        run: |
          cd llvm-project
          mkdir build-llvm && cd build-llvm
          cmake \
            -DLLVM_TARGETS_TO_BUILD=ARM \
            -DLLVM_DEFAULT_TARGET_TRIPLE=arm-linux-gnueabihf \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${{ steps.toolchain.outputs.toolchain }} \
            ../llvm
          make -j `nproc`
          make install

      - name: Build Clang
        run: |
          cd llvm-project
          mkdir build-clang && cd build-clang
          cmake \
            -DLLVM_TARGETS_TO_BUILD=ARM \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${{ steps.toolchain.outputs.toolchain }} \
            ../clang
          make -j `nproc`
          make install

      - name: Build Binutils
        run: |
          cd binutils-gdb
          ./configure \
            --prefix=${{ steps.toolchain.outputs.toolchain }} \
            --enable-gold \
            --enable-ld \
            --target=arm-linux-gnueabihf
          make
          make install

      - name: Build libcxxabi
        run: |
          cd llvm-project
          mkdir build-libcxxabi && cd build-libcxxabi
          cmake \
            -DCMAKE_CROSSCOMPILING=True \
            -DLLVM_TARGETS_TO_BUILD=ARM \
            -DCMAKE_SYSROOT=/sysroot \
            -DCMAKE_INSTALL_PREFIX=${{ steps.toolchain.outputs.toolchain }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=ARM \
            -DCMAKE_C_COMPILER=${{ steps.toolchain.outputs.toolchain }}/bin/clang \
            -DCMAKE_CXX_COMPILER=${{ steps.toolchain.outputs.toolchain }}/bin/clang++ \
            -DLIBCXX_ENABLE_SHARED=False \
            -DLIBCXXABI_ENABLE_EXCEPTIONS=False \
            ../libcxxabi
          make -j `nproc`
          make install

      - name: Build libcxx
        run: |
          cd llvm-project
          cp libcxx/include/cxxabi.h ${{ steps.toolchain.outputs.toolchain }}/include/c++/v1/
          cp libcxx/include/__cxxabi_config.h ${{ steps.toolchain.outputs.toolchain }}/include/c++/v1/
          mkdir build-libcxx && cd build-libcxx
          cmake \
            -DCMAKE_CROSSCOMPILING=True \
            -DLLVM_TARGETS_TO_BUILD=ARM \
            -DCMAKE_SYSROOT=/sysroot \
            -DCMAKE_INSTALL_PREFIX=${{ steps.toolchain.outputs.toolchain }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=ARM \
            -DCMAKE_C_COMPILER=${{ steps.toolchain.outputs.toolchain }}/bin/clang \
            -DCMAKE_CXX_COMPILER=${{ steps.toolchain.outputs.toolchain }}/bin/clang++ \
            -DLIBCXX_ENABLE_SHARED=False \
            -DLIBCXX_ENABLE_EXCEPTIONS=False \
            -DLIBCXX_CXX_ABI=libcxxabi \
            -DLIBCXX_CXX_ABI_INCLUDE_PATHS=${{ steps.toolchain.outputs.toolchain }}/include/c++/v1 \
            -DLIBCXX_CXX_ABI_LIBRARY_PATH=${{ steps.toolchain.outputs.toolchain }}/lib \
            -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=True \
            ../libcxx
          make -j `nproc`
          make install

      - name: Push to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: ./main/Dockerfile-toolchain
          registry: docker.pkg.github.com
          repository: barteo/flutter-pi-toolchain/toolchain
          tag_with_ref: true
